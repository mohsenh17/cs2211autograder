import os
import glob
import subprocess
import re
import sys


def compileAndRunQ1(studentName):
    """
    Compiles and runs a C program for a given student, executing multiple test cases
    and logging the results.

    This function performs the following steps:
    1. Locates the directory containing the student's Assignment 3 submission.
    2. Compiles the C source file `part1.c` located within this directory.
    3. Executes the compiled program with predefined input test cases.
    4. Compares the program's output against expected results.
    5. Logs the comparison results to specified log files.

    Args:
        studentName (str): The name of the student whose program is being tested.

    Returns:
        None
    """
    directories = glob.glob("subs/{}/2*-Assignment3".format(studentName))[0]
    os.system("gcc {}/part1.c -o {}/part1.out".format(directories,directories))
    command = "./{}/part1.out".format(directories)
    
    
    test_cases = {
    "input_5_1,2,3,4,5": {
        "input": "5\n1 2 3 4 5\n",
        "expected_out": {
            'p0': 5,
            'p1': "[0] = 1, [1] = 2, [2] = 3, [3] = 4, [4] = 5",
            'p2': "[4] = 5, [3] = 4, [2] = 3, [1] = 2, [0] = 1",
            'p3': "[1] = 2, [3] = 4",
            'p4': 15,
            'p5': "[0] = 1, [1] = 2, [2] = 3, [3] = 4, [4] = 5",
            'p6': "[4] = 5, [1] = 2, [2] = 3, [3] = 4, [0] = 1"
        }
    },
    "input_6_10,15,20,25,30,35": {
        "input": "6\n10 15 20 25 30 35\n",
        "expected_out": {
            'p0': 6,
            'p1': "[0] = 10, [1] = 15, [2] = 20, [3] = 25, [4] = 30, [5] = 35",
            'p2': "[5] = 35, [4] = 30, [3] = 25, [2] = 20, [1] = 15, [0] = 10",
            'p3': "[0] = 10, [2] = 20, [4] = 30",
            'p4': 135,
            'p5': "[0] = 10, [1] = 15, [2] = 20, [3] = 25, [4] = 30, [5] = 35",
            'p6': "[5] = 35, [1] = 15, [2] = 20, [3] = 25, [4] = 30, [0] = 10"
        }
    },
    "input_7_3,5,7,9,11,13,15": {
        "input": "7\n3 5 7 9 11 13 15\n",
        "expected_out": {
            'p0': 7,
            'p1': "[0] = 3, [1] = 5, [2] = 7, [3] = 9, [4] = 11, [5] = 13, [6] = 15",
            'p2': "[6] = 15, [5] = 13, [4] = 11, [3] = 9, [2] = 7, [1] = 5, [0] = 3",
            'p3': "",
            'p4': 63,
            'p5': "[0] = 3, [1] = 5, [2] = 7, [3] = 9, [4] = 11, [5] = 13, [6] = 15",
            'p6': "[6] = 15, [1] = 5, [2] = 7, [3] = 9, [4] = 11, [5] = 13, [0] = 3"
        }
    },
    "input_8_2,4,6,8,10,12,14,16": {
        "input": "8\n2 4 6 8 10 12 14 16\n",
        "expected_out": {
            'p0': 8,
            'p1': "[0] = 2, [1] = 4, [2] = 6, [3] = 8, [4] = 10, [5] = 12, [6] = 14, [7] = 16",
            'p2': "[7] = 16, [6] = 14, [5] = 12, [4] = 10, [3] = 8, [2] = 6, [1] = 4, [0] = 2",
            'p3': "[0] = 2, [1] = 4, [2] = 6, [3] = 8, [4] = 10, [5] = 12, [6] = 14, [7] = 16",
            'p4': 72,
            'p5': "[0] = 2, [1] = 4, [2] = 6, [3] = 8, [4] = 10, [5] = 12, [6] = 14, [7] = 16",
            'p6': "[7] = 16, [1] = 4, [2] = 6, [3] = 8, [4] = 10, [5] = 12, [6] = 14, [0] = 2"
        }
    },
    "input_9_9,18,27,36,45,54,63,72,81": {
        "input": "9\n9 18 27 36 45 54 63 72 81\n",
        "expected_out": {
            'p0': 9,
            'p1': "[0] = 9, [1] = 18, [2] = 27, [3] = 36, [4] = 45, [5] = 54, [6] = 63, [7] = 72, [8] = 81",
            'p2': "[8] = 81, [7] = 72, [6] = 63, [5] = 54, [4] = 45, [3] = 36, [2] = 27, [1] = 18, [0] = 9",
            'p3': "[1] = 18, [3] = 36, [5] = 54, [7] = 72",
            'p4': 405,
            'p5': "[0] = 9, [1] = 18, [2] = 27, [3] = 36, [4] = 45, [5] = 54, [6] = 63, [7] = 72, [8] = 81",
            'p6': "[8] = 81, [1] = 18, [2] = 27, [3] = 36, [4] = 45, [5] = 54, [6] = 63, [7] = 72, [0] = 9"
        }
    },
    "input_10_1,3,5,7,9,11,13,15,17,19": {
        "input": "10\n1 3 5 7 9 11 13 15 17 19\n",
        "expected_out": {
            'p0': 10,
            'p1': "[0] = 1, [1] = 3, [2] = 5, [3] = 7, [4] = 9, [5] = 11, [6] = 13, [7] = 15, [8] = 17, [9] = 19",
            'p2': "[9] = 19, [8] = 17, [7] = 15, [6] = 13, [5] = 11, [4] = 9, [3] = 7, [2] = 5, [1] = 3, [0] = 1",
            'p3': "",
            'p4': 100,
            'p5': "[0] = 1, [1] = 3, [2] = 5, [3] = 7, [4] = 9, [5] = 11, [6] = 13, [7] = 15, [8] = 17, [9] = 19",
            'p6': "[9] = 19, [1] = 3, [2] = 5, [3] = 7, [4] = 9, [5] = 11, [6] = 13, [7] = 15, [8] = 17, [0] = 1"
        }
    },
    "input_11_11,22,33,44,55,66,77,88,99,110,121": {
        "input": "11\n11 22 33 44 55 66 77 88 99 110 121\n",
        "expected_out": {
            'p0': 11,
            'p1': "[0] = 11, [1] = 22, [2] = 33, [3] = 44, [4] = 55, [5] = 66, [6] = 77, [7] = 88, [8] = 99, [9] = 110, [10] = 121",
            'p2': "[10] = 121, [9] = 110, [8] = 99, [7] = 88, [6] = 77, [5] = 66, [4] = 55, [3] = 44, [2] = 33, [1] = 22, [0] = 11",
            'p3': "[1] = 22, [3] = 44, [5] = 66, [7] = 88, [9] = 110",
            'p4': 726,
            'p5': "[0] = 11, [1] = 22, [2] = 33, [3] = 44, [4] = 55, [5] = 66, [6] = 77, [7] = 88, [8] = 99, [9] = 110, [10] = 121",
            'p6': "[10] = 121, [1] = 22, [2] = 33, [3] = 44, [4] = 55, [5] = 66, [6] = 77, [7] = 88, [8] = 99, [9] = 110, [0] = 11"
        }
    },
    "input_12_12,24,36,48,60,72,84,96,108,120,132,144": {
        "input": "12\n12 24 36 48 60 72 84 96 108 120 132 144\n",
        "expected_out": {
            'p0': 12,
            'p1': "[0] = 12, [1] = 24, [2] = 36, [3] = 48, [4] = 60, [5] = 72, [6] = 84, [7] = 96, [8] = 108, [9] = 120, [10] = 132, [11] = 144",
            'p2': "[11] = 144, [10] = 132, [9] = 120, [8] = 108, [7] = 96, [6] = 84, [5] = 72, [4] = 60, [3] = 48, [2] = 36, [1] = 24, [0] = 12",
            'p3': "[0] = 12, [1] = 24, [2] = 36, [3] = 48, [4] = 60, [5] = 72, [6] = 84, [7] = 96, [8] = 108, [9] = 120, [10] = 132, [11] = 144",
            'p4': 936,
            'p5': "[0] = 12, [1] = 24, [2] = 36, [3] = 48, [4] = 60, [5] = 72, [6] = 84, [7] = 96, [8] = 108, [9] = 120, [10] = 132, [11] = 144",
            'p6': "[11] = 144, [1] = 24, [2] = 36, [3] = 48, [4] = 60, [5] = 72, [6] = 84, [7] = 96, [8] = 108, [9] = 120, [10] = 132, [0] = 12"
        }
    },
    "input_7_1,1,2,3,5,8,13": {
        "input": "7\n1 1 2 3 5 8 13\n",
        "expected_out": {
            'p0': 7,
            'p1': "[0] = 1, [1] = 1, [2] = 2, [3] = 3, [4] = 5, [5] = 8, [6] = 13",
            'p2': "[6] = 13, [5] = 8, [4] = 5, [3] = 3, [2] = 2, [1] = 1, [0] = 1",
            'p3': "[2] = 2, [5] = 8",
            'p4': 33,
            'p5': "[0] = 1, [1] = 1, [2] = 2, [3] = 3, [4] = 5, [5] = 8, [6] = 13",
            'p6': "[6] = 13, [1] = 1, [2] = 2, [3] = 3, [4] = 5, [5] = 8, [0] = 1"
        }
    },
    "input_8_14,21,28,35,42,49,56,63": {
        "input": "8\n14 21 28 35 42 49 56 63\n",
        "expected_out": {
            'p0': 8,
            'p1': "[0] = 14, [1] = 21, [2] = 28, [3] = 35, [4] = 42, [5] = 49, [6] = 56, [7] = 63",
            'p2': "[7] = 63, [6] = 56, [5] = 49, [4] = 42, [3] = 35, [2] = 28, [1] = 21, [0] = 14",
            'p3': "[0] = 14, [2] = 28, [4] = 42, [6] = 56",
            'p4': 308,
            'p5': "[0] = 14, [1] = 21, [2] = 28, [3] = 35, [4] = 42, [5] = 49, [6] = 56, [7] = 63",
            'p6': "[7] = 63, [1] = 21, [2] = 28, [3] = 35, [4] = 42, [5] = 49, [6] = 56, [0] = 14"
        }
    },
    "input_9_1,2,3,4,5,6,7,8,9": {
        "input": "9\n1 2 3 4 5 6 7 8 9\n",
        "expected_out": {
            'p0': 9,
            'p1': "[0] = 1, [1] = 2, [2] = 3, [3] = 4, [4] = 5, [5] = 6, [6] = 7, [7] = 8, [8] = 9",
            'p2': "[8] = 9, [7] = 8, [6] = 7, [5] = 6, [4] = 5, [3] = 4, [2] = 3, [1] = 2, [0] = 1",
            'p3': "[1] = 2, [3] = 4, [5] = 6, [7] = 8",
            'p4': 45,
            'p5': "[0] = 1, [1] = 2, [2] = 3, [3] = 4, [4] = 5, [5] = 6, [6] = 7, [7] = 8, [8] = 9",
            'p6': "[8] = 9, [1] = 2, [2] = 3, [3] = 4, [4] = 5, [5] = 6, [6] = 7, [7] = 8, [0] = 1"
        }
    }
    }
    w = open("subs/{}/convVal.txt".format(studentName), 'w')
    wre = open("subs/{}/re.txt".format(studentName), 'w')
    for key, value in test_cases.items():
        input_data = value["input"]
        expected_output = value["expected_out"]
        process = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        stdout, stderr = process.communicate(input=input_data)
        wre.write(stdout)
        stdoutSplit = stdout.split('\n')
        lengthBytes = stdoutSplit[0]
        parts = {}
        for i in range(1, 7):
            parts[f'p{i}'] = stdoutSplit[i * 2].split(':')[1].strip()
        
        w.write(f"{{ {key}:\n")
        for part, expected in expected_output.items():
            if part == 'p0':
                continue  # skip p0 since it is not used in the output comparison
            
            if str(expected) not in parts[part]:
                w.write(f"\t{{{part}:\n\t\t expected_output: {expected} \n\t\t code_output: {parts[part]} }}\n")
            else:
                w.write(f"\t{{{part}: correct}}\n")
        w.write("}\n")



        

    
    
studentName = str(sys.argv[1]).split('/')[1]
#studentName = ''
print(studentName)
try:
    compileAndRunQ1(studentName)
    print(studentName)
except:
    print(studentName,': some error')
    